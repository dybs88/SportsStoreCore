// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsStore.DAL.Contexts;

namespace SportsStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180918132414_VatRate2")]
    partial class VatRate2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SportsStore.Models.Cart.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrderId");

                    b.Property<int?>("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("Value");

                    b.HasKey("CartItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductID");

                    b.ToTable("Items","Sales");
                });

            modelBuilder.Entity("SportsStore.Models.CustomerModels.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(6);

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<int>("CustomerId");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<string>("ZipCode")
                        .IsRequired();

                    b.HasKey("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses","Customer");
                });

            modelBuilder.Entity("SportsStore.Models.CustomerModels.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(9);

                    b.HasKey("CustomerId");

                    b.ToTable("Customers","Customer");
                });

            modelBuilder.Entity("SportsStore.Models.OrderModels.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<int>("CustomerId");

                    b.Property<int>("DocumentTypeId");

                    b.Property<bool>("GiftWrap");

                    b.Property<decimal>("GrossValue");

                    b.Property<decimal>("NetValue");

                    b.Property<string>("OrderNumber");

                    b.Property<bool>("Shipped");

                    b.Property<int>("VatRateId");

                    b.HasKey("OrderId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("SalesOrders","Sales");
                });

            modelBuilder.Entity("SportsStore.Models.ProductModels.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<decimal>("GrossPrice");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("NetPrice");

                    b.Property<int>("VatRateId");

                    b.HasKey("ProductID");

                    b.ToTable("Products","Store");
                });

            modelBuilder.Entity("SportsStore.Models.ProductModels.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName");

                    b.Property<bool>("IsMain");

                    b.Property<int>("ProductId");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages","Store");
                });

            modelBuilder.Entity("SportsStore.Models.Cart.CartItem", b =>
                {
                    b.HasOne("SportsStore.Models.OrderModels.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportsStore.Models.ProductModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("SportsStore.Models.CustomerModels.Address", b =>
                {
                    b.HasOne("SportsStore.Models.CustomerModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportsStore.Models.OrderModels.Order", b =>
                {
                    b.HasOne("SportsStore.Models.CustomerModels.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportsStore.Models.CustomerModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportsStore.Models.ProductModels.ProductImage", b =>
                {
                    b.HasOne("SportsStore.Models.ProductModels.Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
